# -*- coding: utf-8 -*-
"""POO_Alura09_Annac.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19k74bsAcPuUZD-RTpytC6sdacnksGwv7

# **Encapsulamento**
"""

class Conta:
    __slots__ = ['_numero', '_titular', '_saldo', '_limite', 'id'] # Slots não permite que usuários criem outros atributos
    _proximo_id = 1  # Atributo de classe para gerar um id automático e único

    def __init__(self, numero, titular, saldo, limite=1000.0):
        self._numero = numero
        self._titular = titular
        self._saldo = saldo
        self._limite = limite

        self.id = Conta._proximo_id
        Conta._proximo_id += 1 # Método estático: quando não é necessário receber a referência de um objeto

    # Getter e Setter para saldo
    @property # Permite acesso controlado como se fosse um atributo
    def saldo(self):
        return self._saldo

    @saldo.setter # Valida para não permitir saldo negativo
    def saldo(self, novo_saldo):
        if novo_saldo < 0:
            print("Saldo não pode ser negativo.")
        else:
            self._saldo = novo_saldo

    # Getter para número (somente leitura)
    @property
    def numero(self):
        return self._numero

    @property
    def limite(self):
        return self._limite

    @limite.setter
    def limite(self, novo_limite):
        if novo_limite < 0:
            print("Limite não pode ser negativo.")
        else:
            self._limite = novo_limite

    # Método para sacar
    def sacar(self, valor):
        if valor <= (self._saldo + self._limite):
            self._saldo -= valor
            print(f"Saque de R${valor} realizado com sucesso.")
        else:
            print("Saldo insuficiente para saque.")

    # Método para depositar
    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print(f"Depósito de R${valor} realizado com sucesso.")
        else:
            print("Valor de depósito inválido.")

    # Método para transferir
    def transferir(self, valor, destino):
        if isinstance(destino, Conta): # Verifica se destino é uma instância de 'Conta'
            if valor <= (self._saldo + self._limite):
                self.sacar(valor)
                destino.depositar(valor)
                print(f"Transferência de R${valor} realizada para a conta {destino.numero}.")
            else:
                print("Saldo insuficiente para transferência.")
        else:
            print("Destino inválido.")


# EXEMPLO DE USO

c1 = Conta("001", "João", 500.0)
c2 = Conta("002", "Maria", 1000.0)

print("Saldo c1:", c1.saldo)
c1.depositar(100)    # +100
print("Saldo c1:", c1.saldo)

c1.sacar(200)        # -200
print("Saldo c1:", c1.saldo)

c1.transferir(300, c2)
print("Saldo c1:", c1.saldo)
print("Saldo c2:", c2.saldo)
