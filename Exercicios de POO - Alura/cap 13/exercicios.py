# -*- coding: utf-8 -*-
"""POO_Alura13_Annac.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15CQU7P4X0KIhO9Ci2PnN5FzmghOLjauo

# **Exceções e Erros**
"""

import abc

# Exceção personalizada
class SaldoInsuficienteError(Exception): # Indica um erro
    pass

# Interface Tributável
class Tributavel(abc.ABC):
    """Classe que contém operações de um objeto tributável."""

    @abc.abstractmethod
    def get_valor_imposto(self):
        pass

# Classe base Conta
class Conta:
    def __init__(self, titular, numero, saldo=0.0):
        self._titular = titular
        self._numero = numero
        self._saldo = saldo

    def deposita(self, valor):
        if valor < 0:
            raise ValueError('Você tentou depositar um valor negativo.')
        self._saldo += valor

    def saca(self, valor):
        if valor < 0:
            raise ValueError('Você tentou sacar um valor negativo.')
        if self._saldo < valor:
            raise SaldoInsuficienteError('Saldo insuficiente.')
        self._saldo -= valor

    def get_saldo(self):
        return self._saldo

    def __repr__(self):
        return f"<{self.__class__.__name__} de {self._titular}>"

# ContaCorrente
class ContaCorrente(Conta):
    def get_valor_imposto(self):
        return self._saldo * 0.01

    def saca(self, valor):
        if valor < 0:
            raise ValueError('Você tentou sacar um valor negativo.')
        if self._saldo < valor + 0.10:
            raise SaldoInsuficienteError('Saldo insuficiente.')
        self._saldo -= (valor + 0.10)

# ContaPoupanca
class ContaPoupanca(Conta):
    def deposita(self, valor):
        if valor < 0:
            raise ValueError('Você tentou depositar um valor negativo.')
        self._saldo += valor

# ContaInvestimento
class ContaInvestimento(Conta):
    def atualiza(self, taxa):
        self._saldo += self._saldo * taxa * 5

    def get_valor_imposto(self):
        return self._saldo * 0.03

# SeguroDeVida
class SeguroDeVida:
    def __init__(self, valor, titular, numero_apolice):
        self._valor = valor
        self._titular = titular
        self._numero_apolice = numero_apolice

    def get_valor_imposto(self):
        return 50 + self._valor * 0.05

    def __repr__(self):
        return f"<SeguroDeVida de {self._titular}>"

# CaixaEletronico
class CaixaEletronico:
    def deposita(self, conta, valor):
        try:
            conta.deposita(valor)
            print(f"Depósito de {valor} realizado com sucesso.")
        except ValueError as e:
            print(e)

    def saca(self, conta, valor):
        try:
            conta.saca(valor)
            print(f"Saque de {valor} realizado com sucesso.")
        except ValueError:
            print('O valor a ser sacado deve ser um número positivo.')
        except SaldoInsuficienteError:
            print('Você não possui saldo suficiente para concluir esta operação.')

# Manipulador de Tributáveis
class ManipuladorDeTributaveis:
    def calcula_impostos(self, lista_tributaveis):
        total = 0
        for t in lista_tributaveis:
            if isinstance(t, Tributavel):
                total += t.get_valor_imposto()
            else:
                print(f"{t} não é um tributável")
        return total

# EXEMPLO DE USO:

if __name__ == "__main__":
    # Registro das classes como tributáveis
    Tributavel.register(ContaCorrente)
    Tributavel.register(SeguroDeVida)
    Tributavel.register(ContaInvestimento)

    cc = ContaCorrente('João', '123-4', 1000.0)
    cp = ContaPoupanca('Maria', '123-6', 500.0)
    ci = ContaInvestimento('Ana', '123-0')
    ci.deposita(100.0)
    seguro = SeguroDeVida(100.0, 'José', '345-77')

    caixa = CaixaEletronico()

    # Testando saque com valor negativo
    caixa.saca(cc, -100)

    # Testando saque com valor maior que o saldo
    caixa.saca(cc, 5000)

    # Testando depósito com valor negativo
    caixa.deposita(cc, -50)

    # Lista de tributáveis
    lista_tributaveis = [cc, cp, ci, seguro]

    mt = ManipuladorDeTributaveis()
    total = mt.calcula_impostos(lista_tributaveis)
    print(f"Total de impostos: R${total:.2f}")